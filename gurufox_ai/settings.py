"""
Django settings for gurufox_ai project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import socket
from ipaddress import IPv4Network
from pathlib import Path
from distutils.util import strtobool
from dotenv import load_dotenv
import sentry_sdk
import rollbar


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SYS_NAME = os.uname().sysname

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret! 
# TODO: Change this to an env environment variable
load_dotenv()

DOMAIN = os.getenv("DOMAIN", "ourdate.gurufox.ai")
SITE_NAME = "Ourdate's Guru Fox"
SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-u-%o_#5yug0azh(l!z!9ye2qng-hungcgj%-ajc(z+3xb=op#9')
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is not set in .env")
GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')
if not GOOGLE_MAPS_API_KEY:
    raise ValueError("GOOGLE_MAPS_API_KEY is not set in .env")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
if not STRIPE_SECRET_KEY:
    raise ValueError("STRIPE_SECRET_KEY is not set in .env")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
if not STRIPE_WEBHOOK_SECRET:
    raise ValueError("STRIPE_WEBHOOK_SECRET is not set in .env")

STRIPE_SUBSCRIPTION_PRICE = os.getenv("STRIPE_SUBSCRIPTION_PRICE", None)
STRIPE_PAYMENT_PRICE = os.getenv("STRIPE_PAYMENT_PRICE", None)

SENTRY_DSN = os.getenv("SENTRY_DSN")
SENTRY_DEBUG_ENV = os.getenv("SENTRY_DEBUG")
SENTRY_DEBUG = SENTRY_DEBUG_ENV == strtobool("True")
# SECURITY WARNING: don't run with debug turned on in production!

AUTO_COMMIT = True

DEBUG = os.getenv("DEBUG", False)
if SYS_NAME == "Darwin":
    DEBUG = True
if "GITPOD_REPO_ROOT" in os.environ:
    DEBUG = True
#Rollbar
ROLLBAR = {
    'access_token': os.environ.get('ROLLBAR_ACCESS_TOKEN'),
    'environment': 'development' if DEBUG else 'production',
    'code_version': '1.0',
    'root': BASE_DIR,
}
if DEBUG == True:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",   
            },
            'slack': {
                'class': 'utils.slack_handler.SlackHandler',
            },
            'rollbar': {
                'class': 'rollbar.logger.RollbarHandler',
                'access_token': ROLLBAR['access_token'],
                'environment': ROLLBAR['environment'],
                'level': 'ERROR',
            },
        },
        "loggers": {
            "django": {
                "handlers": ["console", "rollbar"],
                "level": "INFO",
            },
            "slack": {
                "handlers": ["slack"],
                "level": "DEBUG",
            },
        },
        'root': {
            'handlers': ['rollbar'],
            'level': 'ERROR'
        },
    }


hostname = socket.gethostname()
try:
    local_ip = socket.gethostbyname(hostname)
except socket.gaierror as error:
    local_ip = '127.0.0.1'

ALLOWED_HOSTS = [
    "api.gurufox.ai",
    "gurufoxbackend-env.eba-drpampuu.us-east-1.elasticbeanstalk.com",
    "localhost",
    "127.0.0.1",
    "127.0.0.1:8000",
    ".gipod.io",
    local_ip,
    "0.0.0.0:8000",
    "0.0.0.0"
]
if "GITPOD_REPO_ROOT" in os.environ:
    ALLOWED_HOSTS = [ "*" ]

# Application definition

INSTALLED_APPS = [
    "django_mysql",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'django_ses',
    'django_slack',
    "corsheaders",
    'rest_framework',
    'social_django',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'dateplan',
    'mailings',
    'bouncedEmails',
    'user',
    'djoser',
    'prompts',
    'subscription',
    'payment',
    'googleAuth',
    'oauth2_provider',
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'dateplan.authentication.GoogleOAuth2Authentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
        #'rest_framework.permissions.IsAuthenticated',
    ]
}

SIMPLE_JWT = {
    "Auth_HEADERS_TYPES": ("JWT",),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'access',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh',
    'JWT_AUTH_HTTPONLY': False,
}

PASSWORD_RESET_CONFIRM_URL = os.getenv("PASSWORD_RESET_CONFIRM_URL", "password_confirmation/?uid={uid}&token={token}")

# No clue what the proper URIs are supposed to be. Just guessing here.
DJOSER = {

    'LOGIN_FIELD': 'email',
    'SOCIAL_AUTH_TOKEN_STRATEGY': [
        'djoser.social.token.jwt.TokenStrategy',
        'social_core.backends.oauth.ServerOAuth2',
    ],
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS' : [
        'https://ourdate.gurufox.ai',
        'http://localhost:8000/auth/o/google-oauth2/',
        'https://api.gurufox.ai/auth/o/google-oauth2/',
        'https://api.gurufox.ai',
        'https://gurufox.ai',
        'http://localhost:8080',
        'http://localhost:8000',
        'http://localhost:5173',
    ],
    'SERIALIZERS': {},
    "PASSWORD_RESET_CONFIRM_URL": PASSWORD_RESET_CONFIRM_URL,
}

SOCIAL_AUTH_RAISE_EXCEPTIONS = False

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
)
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', 'oauth2-key')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', 'oauth2-secret')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid',
]

SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']
if DEBUG:
    SOCIAL_AUTH_ALLOWED_REDIRECT_URIS = [
        'http://127.0.0.1:5173/accounts/google/login/callback',
        'https://ourdate.gurufox.ai/accounts/google/login/callback',
    ]
else:
    SOCIAL_AUTH_ALLOWED_REDIRECT_URIS = [
        'https://ourdate.gurufox.ai/accounts/google/login/callback',
    ]



SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
)

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

ROOT_URLCONF = 'gurufox_ai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'gurufox_ai.wsgi.application'

CORS_ALLOWED_ORIGINS = [
    "https://gurufox.ai",
    "https://www.gurufox.ai",
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://localhost:\w+",
    r"^http://127.0.0.1:\w+",
]

CSRF_TRUSTED_ORIGINS = [
    "https://gurufox.ai",
    "https://api.gurufox.ai",
    "https://www.gurufox.ai",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    "http://127.0.0.1",
    "http://localhost",

]

# this is temproary to fix CORS not working and blocking development.
# post sprint we should fix this.
CORS_ALLOW_ALL_ORIGINS  = True


CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)

CORS_ALLOW_CREDENTIALS = True

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

mysql_user = os.getenv("MYSQL_USER")
mysql_password = os.getenv("MYSQL_PASSWORD")
mysql_host = os.getenv("MYSQL_HOST")
mysql_database = os.getenv("MYSQL_DATABASE")

if SYS_NAME == "Darwin" or "GITPOD_REPO_ROOT" in os.environ:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
            "ATOMIC_REQUESTS": True,
        }
    }
else:
    DATABASES = {
        "default": {
            "NAME": mysql_database,
            "ENGINE": "django.db.backends.mysql",
            "HOST": mysql_host,
            "PORT": 3306,
            "USER": mysql_user,
            "PASSWORD": mysql_password,
            "ATOMIC_REQUESTS": True,
            "OPTIONS": {
                "charset": "utf8mb4",
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }

AUTH_USER_MODEL = 'user.User'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_FROM_EMAIL = (
    os.getenv('DEFAULT_FROM_EMAIL', '"OurDate (DO NOT REPLY)" <donot-reply@mail.ourdate-app.com>')
)

EMAIL_BACKEND = 'django_ses.SESBackend'

AWS_SES_ACCESS_KEY_ID = os.getenv("AWS_SES_ACCESS_KEY_ID")
AWS_SES_SECRET_ACCESS_KEY = os.getenv("AWS_SES_SECRET_ACCESS_KEY")

USE_SES_V2 = True

# Slack tokens
SLACK_ACCESS_TOKEN=os.environ.get('SLACK_ACCESS_TOKEN')
SLACK_REFRESH_TOKEN=os.environ.get('SLACK_REFRESH_TOKEN')

# Frontend
SUBSCRIPTION_SUCCESS_URL = 'https://ourdate.gurufox.ai/subscription/'
SUBSCRIPTION_CANCEL_URL = 'https://ourdate.gurufox.ai/subscription/'
PAYMENT_SUCCESS_URL = 'http://ourdate.gurufox.ai/payment/success/'
PAYMENT_CANCEL_URL = 'http://ourdate.gurufox.ai/payment/cancel/'

